#!/usr/bin/bash
#Dependencies, jq, dwdiff

# Save API keys in variables from APIKeys file.
user_id=`grep User_ID APIKeys | cut -d: -f2 | tr -d '[[:space:]]';`
api_token=`grep API_Token APIKeys | cut -d: -f2 | tr -d '[[:space:]]';`

user_json=$(curl https://habitica.com/api/v3/user -s -X GET --compressed -H "Content-Type:application/json" -H "x-api-user: $user_id" -H "x-api-key: $api_token" | json_pp)

#Function -  (json, json or value Object). NVM, just use jq
tasks_json=$(jq '.data.tasksOrder' <<< "$user_json")
todos_json=$(jq '.data.tasksOrder.todos' <<< "$user_json")

#Take todos_json, get rid of [], then make it an array
readarray -t todos_ids <<< "$(tr -d '"' <<< "$(jq '.[]' <<< "$todos_json")")"

#todos_names=$(curl https://habitica.com/api/v3/tasks/${todos_ids[0]} -s -X GET --compressed -H "Content-Type:application/json" -H "x-api-user: $user_id" -H "x-api-key: $api_token" | json_pp)

todos_names=()
for todo_id in ${todos_ids[@]}; do
    #echo "curl https://habitica.com/api/v3/tasks/$todo_id -s -X GET --compressed -H "Content-Type:application/json" -H "x-api-user: $user_id" -H "x-api-key: $api_token" | json_pp"
    todos_names+=("$(jq '.data.text' <<< $(curl https://habitica.com/api/v3/tasks/$todo_id -s -X GET --compressed -H "Content-Type:application/json" -H "x-api-user: $user_id" -H "x-api-key: $api_token" | json_pp))")
done

list_name="todolist.txt"
list_backup="todolist.txt.bkp"
#printf '%s\n' "${todos_names[@]}" > $list_name
#nl -w1 $list_name > $list_name
printf '%s\n' "${todos_names[@]}" | nl -ba -nln -w 1 -s ' ' > $list_name
printf '%s\n' "${todos_names[@]}" | nl -ba -nln -w 1 -s ' ' > $list_backup

# Edit the Habitica list
#   Todo: Change vim to $editor
vim $list_name &&


diff $list_backup $list_name > diff.txt
sort -rV diff.txt > diffsorted.txt

re_num='^[0-9]+$'

declare -a arr


while read -r line; do
    printf 'LINE: %s\n' "$line"
    sign=$(echo "$line" | cut -d" " -f1)
    number="$(echo "$line" | cut -d" " -f2)"
    if [ "$sign" == ">" -o "$sign" == "<" ] && [[ $number =~ $re_num  ]]; then
        if [ "$sign" == ">" ]; then
            arr+=($number" 10");
            printf " ArrLength>: %s\n" "${#arr[@]}"
        elif [ "$sign" == "<" ]; then
            isChange=0;
            printf " ArrLength<: %s\n" "${#arr[@]}"
            for i in "${!arr[@]}"
            do
                printf "  Index: %s  and ArrAtPoint: %s\n" "$i" "$arr[$i]"

                if [ "$number" -eq "$(cut -d" " -f1 <<< $arr[$i])" ]; then
                    printf "   Number<: %s equal to arr>: %s\n" $number "$arr[$i]"
                    #printf "Number<: %s equal to arr>: %s\n" $number "$(cut -d" " -f1 <<< $arr[$i])"
                    printf '   Before:%s\n' "${arr[@]}"
                    printf "    Index to change: %s\n" "$i"
                    arr[$i]=$number" 11";
                    printf '   After:%s\n' "${arr[@]}"
                    isChange=1;
                fi
            done
            if [ "$isChange" == "0" ]; then
                arr+=($number" 01");
            fi
        fi
    fi
done < diffsorted.txt

printf '%s\n' "${arr[@]}";


#UTF character ✓ ⨯i→➞
